//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Tecan.Sila2;


namespace SiLAGen.Client.TestService
{
    
    
    /// <summary>
    /// Data transfer object for the request of the Initialize command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class InitializeRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        /// <summary>
        /// Create a new instance
        /// </summary>
        public InitializeRequestDto()
        {
        }
        
        /// <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        public InitializeRequestDto(Tecan.Sila2.IBinaryStore store)
        {
        }
        
        /// <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "sila/contracts/TestService/v1/Command/Initialize";
            }
        }
        
        /// <summary>
        /// Validates the given request object
        /// </summary>
        public void Validate()
        {
        }
        
        /// <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    /// <summary>
    /// Data transfer object for the request of the Cancel Command Works command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class CancelCommandWorksRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        /// <summary>
        /// Create a new instance
        /// </summary>
        public CancelCommandWorksRequestDto()
        {
        }
        
        /// <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        public CancelCommandWorksRequestDto(Tecan.Sila2.IBinaryStore store)
        {
        }
        
        /// <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "sila/contracts/TestService/v1/Command/CancelCommandWorks";
            }
        }
        
        /// <summary>
        /// Validates the given request object
        /// </summary>
        public void Validate()
        {
        }
        
        /// <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    /// <summary>
    /// Data transfer object for the request of the Observable Intermediate Command With Cancellation command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class ObservableIntermediateCommandWithCancellationRequestDto : Tecan.Sila2.ISilaTransferObject, Tecan.Sila2.ISilaRequestObject
    {
        
        /// <summary>
        /// Create a new instance
        /// </summary>
        public ObservableIntermediateCommandWithCancellationRequestDto()
        {
        }
        
        /// <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        public ObservableIntermediateCommandWithCancellationRequestDto(Tecan.Sila2.IBinaryStore store)
        {
        }
        
        /// <summary>
        /// Gets the command identifier for this command
        /// </summary>
        /// <returns>The fully qualified command identifier</returns>
        public string CommandIdentifier
        {
            get
            {
                return "sila/contracts/TestService/v1/Command/ObservableIntermediateCommandWithCancellati" +
                    "on";
            }
        }
        
        /// <summary>
        /// Validates the given request object
        /// </summary>
        public void Validate()
        {
        }
        
        /// <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return null;
        }
    }
    
    /// <summary>
    /// Data transfer object for the intermediate response of the Observable Intermediate Command With Cancellation command
    /// </summary>
    [ProtoBuf.ProtoContractAttribute()]
    public class ObservableIntermediateCommandWithCancellationIntermediateDto : Tecan.Sila2.ISilaTransferObject
    {
        
        private Tecan.Sila2.StringDto _intermediate;
        
        /// <summary>
        /// Create a new instance
        /// </summary>
        public ObservableIntermediateCommandWithCancellationIntermediateDto()
        {
        }
        
        /// <summary>
        /// Create a new instance
        /// </summary>
        /// <param name="store">An object to organize binaries.</param>
        public ObservableIntermediateCommandWithCancellationIntermediateDto(string intermediate, Tecan.Sila2.IBinaryStore store)
        {
            Intermediate = new Tecan.Sila2.StringDto(intermediate, store);
        }
        
        [ProtoBuf.ProtoMemberAttribute(1)]
        public Tecan.Sila2.StringDto Intermediate
        {
            get
            {
                return _intermediate;
            }
            set
            {
                _intermediate = value;
            }
        }
        
        /// <summary>
        /// Validates the given request object
        /// </summary>
        public void Validate()
        {
            Argument.Validate(Intermediate, "intermediate");
        }
        
        /// <summary>
        /// Validates the contents of this transfer object
        /// </summary>
        /// <returns>A validation error or null, if no validation error occurred.</returns>
        public string GetValidationErrors()
        {
            return ("" + Argument.Require(Intermediate, "intermediate"));
        }
    }
}
